import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Definir las ecuaciones
def eq1(x, y):
    return (1.833 - 1.000*x - 0.500*y) / 0.333

def eq2(x, y):
    return (1.083 - 0.500*x - 0.333*y) / 0.250

def eq3(x, y):
    return (0.783 - 0.333*x - 0.250*y) / 0.200

def eq3m(x, y):
    return (0.784 - 0.333*x - 0.250*y) / 0.200  # Pequeño cambio en el término independiente

# Crear la malla para x e y
x = np.linspace(-1, 3, 100)
y = np.linspace(-1, 3, 100)
X, Y = np.meshgrid(x, y)

# Calcular z para cada ecuación
Z1 = eq1(X, Y)
Z2 = eq2(X, Y)
Z3 = eq3(X, Y)
Z3m = eq3m(X, Y)

# Crear la figura y los ejes 3D
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

# Graficar las superficies
surf1 = ax.plot_surface(X, Y, Z1, alpha=0.3, color='r')
surf2 = ax.plot_surface(X, Y, Z2, alpha=0.3, color='g')
surf3 = ax.plot_surface(X, Y, Z3, alpha=0.3, color='b')
surf3m = ax.plot_surface(X, Y, Z3m, alpha=0.3, color='m')

# Configurar etiquetas y título
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Visualización 3D de Sistema Mal Condicionado')

# Crear leyenda manualmente
from matplotlib.patches import Patch
legend_elements = [Patch(facecolor='r', edgecolor='r', alpha=0.3, label='Ecuación 1'),
                   Patch(facecolor='g', edgecolor='g', alpha=0.3, label='Ecuación 2'),
                   Patch(facecolor='b', edgecolor='b', alpha=0.3, label='Ecuación 3 (original)'),
                   Patch(facecolor='m', edgecolor='m', alpha=0.3, label='Ecuación 3 (modificada)')]

ax.legend(handles=legend_elements, loc='upper right')

# Mostrar el gráfico
plt.show()
